<?php
use Drupal\menu_block\Util\MenuTree;

/**
 * @file
 * Provides configurable blocks of menu items.
 */

/**
 * Implements hook_theme().
 * /
function menu_block_theme(&$existing, $type, $theme, $path) {
  // Add theme hook suggestion patterns for the core theme functions used in
  // this module. We can't add them during hook_theme_registry_alter() because
  // we will already have missed the opportunity for the theme engine's
  // theme_hook() to process the pattern. And we can't run the pattern ourselves
  // because we aren't given the type, theme and path in that hook.
  $existing['menu_tree']['pattern'] = 'menu_tree__';
  $existing['menu_link']['pattern'] = 'menu_link__';

  return array(
    'menu_block_wrapper' => array(
      'template' => 'menu-block-wrapper',
      'variables' => array('content' => array(), 'config' => array(), 'delta' => NULL),
      'pattern' => 'menu_block_wrapper__',
    ),
    'menu_block_menu_order' => array(
      'render element' => 'element',
      'file' => 'menu_block.admin.inc',
    ),
  );
}

/**
 * Implements hook_menu_link_defaults().
 */
function menu_block_menu_link_defaults() {
  $links['menu_block.configure'] = array(
    'link_title' => 'Menu Block',
    'description' => 'Configure menu block.',
    'route_name' => 'menu_block.configure',
  );
  return $links;
}

/**
 * Implements hook_menu_alter().
 */
// @todo Move this to contextual links yml.
//function menu_block_menu_alter(&$items) {
//  // Fake the necessary menu attributes necessary for a contextual link.
//  $items['admin/content/book/%node']['title'] = 'Edit book outline';
//  $items['admin/content/book/%node']['type'] = MENU_LOCAL_TASK;
//  $items['admin/content/book/%node']['context'] = (MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE);
//  $items['admin/content/book/%node']['tab_root'] = 'admin/content/book';
//}

/**
 * Implements hook_help().
 */
function menu_block_help($path, $arg) {
  switch ($path) {
    case 'admin/structure/block/manage/%/%':
      if ($arg[4] != 'menu_block') {
        break;
      }
    case 'admin/help#menu_block':
    case 'admin/structure/block/add-menu-block':
      module_load_include('inc', 'menu_block', 'menu_block.pages');
      return _menu_block_help($path, $arg);
  }
}
/**
 * Process variables for menu-block-wrapper.html.twig
 *
 * @see menu-block-wrapper.html.twig
 */
function template_preprocess_menu_block_wrapper(&$variables) {
  $variables['attributes']['class'][] = 'menu-name-' . $variables['config']['menu_name'];
  $variables['attributes']['class'][] = 'parent-mlid-' . $variables['config']['parent_mlid'];
  $variables['attributes']['class'][] = 'menu-level-' . $variables['config']['level'];
}

/**
 * Gets the data structure representing a menu tree for the given configuration.
 *
 * @param $config
 *   See the $config param of menu_tree_build().
 *
 * @deprecated as of Drupal 8.x-2.0. Use
 *   Drupal::service('menu_block.repository')->blockData() directly instead.
 */
function menu_tree_block_data(&$config) {
  return \Drupal::service('menu_block.repository')->blockData($config);
}

/**
 * Returns the current page's menu.
 *
 * @deprecated as of Drupal 8.x-2.0. Use
 *   Drupal::service('menu_block.repository')->getCurrentPageMenu() directly
 *   instead.
 */
function menu_block_get_current_page_menu() {
  return \Drupal::service('menu_block.repository')->getCurrentPageMenu();
}

/**
 * Build a menu tree based on the provided configuration.
 *
 * @param $config
 *   array An array of configuration options that specifies how to build the
 *   menu tree and its title.
 *   - delta: (string) The menu_block's block delta.
 *   - menu_name: (string) The machine name of the requested menu. Can also be
 *     set to MENU_TREE__CURRENT_PAGE_MENU to use the menu selected by the page.
 *   - parent_mlid: (int) The mlid of the item that should root the tree. Use 0
 *     to use the menu's root.
 *   - title_link: (boolean) Specifies if the title should be rendered as a link
 *     or a simple string.
 *   - admin_title: (string) An optional title to uniquely identify the block on
 *     the administer blocks page.
 *   - level: (int) The starting level of the tree.
 *   - follow: (string) Specifies if the starting level should follow the
 *     active menu item. Should be set to 0, 'active' or 'child'.
 *   - depth: (int) The maximum depth the tree should contain, relative to the
 *     starting level.
 *   - expanded: (boolean) Specifies if the entire tree be expanded or not.
 *   - sort: (boolean) Specifies if the tree should be sorted with the active
 *     trail at the top of the tree.
 * @return
 *   array An associative array containing several pieces of data.
 *   - content: The tree as a renderable array.
 *   - subject: The title rendered as HTML.
 *   - subject_array: The title as a renderable array.
 *
 * @deprecated
 */
function menu_tree_build(&$config) {
  \Drupal::service('menu_block.render')->build($config);
}

/**
 * Retrieves the menu item to use for the tree's title.
 *
 * @param $render_title_as_link
 *   boolean A boolean that says whether to render the title as a link or a
 *   simple string.
 * @return
 *   array A renderable array containing the tree's title.
 *
 * @deprecated
 */
function menu_block_get_title($render_title_as_link = TRUE) {
  return \Drupal::service('menu_block.render')->getTitle();
}

/**
 * Returns a renderable menu tree.
 *
 * This is a copy of menu_tree_output() with additional classes added to the
 * output.
 *
 * @param $tree
 *   array A data structure representing the tree as returned from menu_tree_data.
 * @return
 *   string The rendered HTML of that data structure.
 *
 * @deprecated
 */
function menu_block_tree_output(&$tree, $config = array()) {
  return \Drupal::service('menu_block.render')->treeOutput();
}

/**
 * Implements hook_menu_block_get_menus() on behalf of book.module.
 * @todo move these to a plugin?
 */
function book_menu_block_get_menus() {
  $menus = array();
  foreach (\Drupal::service('book.manager')->getAllBooks() AS $book) {
    $menus[$book['menu_name']] = $book['title'];
  }
  return $menus;
}

/**
 * Implements hook_menu_block_get_sort_menus() on behalf of book.module.
 * @todo move these to a plugin?
 */
function book_menu_block_get_sort_menus() {
  return array(
    '/^book\-toc\-.+/' => t('Book navigation'),
  );
}
