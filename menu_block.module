<?php

/**
 * @file
 * Provides configurable blocks of menu items.
 */

use Symfony\Cmf\Component\Routing\RouteObjectInterface;

/**
 * Implements hook_menu_link_defaults().
 */
function menu_block_menu_link_defaults() {
  $links = array();
  $links['menu_block.configure'] = array(
    'link_title' => 'Menu Block',
    'description' => 'Configure menu block.',
    'route_name' => 'menu_block.configure',
    'parent' => 'system.admin.config.user-interface',
  );
  return $links;
}

/**
 * Implements hook_help().
 */
function menu_block_help($path, $arg) {
  $request = \Drupal::request();
  $route_name = $request->attributes->get(RouteObjectInterface::ROUTE_NAME);


  if ($route_name == 'help.main' || ($route_name == 'block.admin_add' && $request->attributes->get('plugin_id') == 'menu_block')) {
    return '<p>' . t('To learn more about configuring menu blocks, see <a href="!url">menu block’s detailed help</a>.', array('!url' => url('admin/help/menu_block'))) . '</p>';
  }
  elseif ($route_name == 'help.page' && $request->attributes->get('name') == 'menu_block') {
    $output =
      '<h3>' . t('Adding menu blocks') . '</h3>'
      . '<p>' . t('To add new menu blocks, use the "<a href="!add-url">Add menu block</a>" link on the <a href="!block-url">administer blocks page</a>. You will then be able to configure your menu block before adding it.', array('!add-url' => url('admin/structure/block/add-menu-block'), '!block-url' => url('admin/structure/block'))) . '</p>'
      . '<h3>' . t('Configuring menu blocks') . '</h3>'
      . '<p>' . t('When adding or configuring a menu block, several configuration options are available:') . '</p>'
      . '<h4>' . t('Basic options') . '</h4>'
      . '<dl>'
      . '<dt><strong>' . t('Block title') . '</strong></dt>'
      . '<dd>' . t('For menu trees that start with the 1st level, the default block title will be the menu name. For menu trees that start with the 2nd level or deeper, the default block title will be the title for the parent menu item of the specified level.')
      . '<p>' . t('For example, if the active menu trail for the Mangement menu is: Administer › Structure › Menus › Main menu, then a menu block configured to start with the 1st level of the Management menu will display a block title of “Management”. And a menu block configured to start with the 3rd level of the Management menu will display a block title of “Structure”.') . '</p></dd>'
      . '<dt><strong>' . t('Block title as link') . '</strong></dt>'
      . '<dd>' . t('For menu trees that start with the 2nd level or deeper, the default block title will be the title for the parent menu item of the specified level. If this option is checked, the block title will be a link to that menu item.') . '</dd>'
      . '<dt><strong>' . t('Administrative title') . '</strong></dt>'
      . '<dd>' . t('To help identify the block on the administer blocks page, you can specify a unique title to be used on that page. If blank, the regular title will be used.') . '</dd>'
      . '<dt><strong>' . t('Menu name') . '</strong></dt>'
      . '<dd>' . t('Select the menu to use for the tree of links.') . '</dd>'
      . '<dt><strong>' . t('Starting level') . '</strong></dt>'
      . '<dd>' . t('Blocks that start with the 1st level will always be visible. Blocks that start with the 2nd level or deeper will only be visible when the trail to the active menu item is in the block’s tree.') . '</dd>'
      . '<dt><strong>' . t('Maximum depth') . '</strong></dt>'
      . '<dd>' . t('From the starting level, specify the maximum depth of the tree. Blocks with a maximum depth of 1 will just be a single un-nested list of links with none of those links’ children displayed.') . '</dd>'
      . '</dl>'
      . '<h4>' . t('Advanced options') . '</h4>'
      . '<dl>'
      . '<dt><strong>' . t('Make the starting level follow the active menu item') . '</strong></dt>'
      . '<dd>' . t('If the active menu item is deeper than the level specified above, the starting level will follow the active menu item. Otherwise, the starting level of the tree will remain fixed.') . '</dd>'
      . '<dt><strong>' . t('Expand all children') . '</strong></dt>'
      . '<dd>' . t('All children of this menu will be expanded.') . '</dd>'
      . '<dt><strong>' . t('Sort') . '</strong></dt>'
      . '<dd>' . t('Sort each item in the active trail to the top of its level. When used on a deep or wide menu tree, the active menu item’s children will be easier to see when the page is reloaded.') . '</dd>'
      . '<dt><strong>' . t('Fixed parent item') . '</strong></dt>'
      . '<dd>' . t('If you select a specific menu item, you alter the “starting level” and “maximum depth” options to be relative to the fixed parent item. The tree of links will only contain children of the selected parent item.') . '</dd>'
      . '</dl>'
      . '<h3>' . t('Styling menu blocks') . '</h3>'
      . '<p>' . t('Themers should be aware of the myriad of classes, templates and theme functions available to them. See the <a href="!url">online documentation</a> or the README.txt file for detailed information about each of them.', array('!url' => url('http://drupal.org/node/748022'))) . '</p>'
      . '<h3>' . t('Menu block API') . '</h3>'
      . '<p>' . t('Developers can use the API of this module to create their own menu trees outside the confines of blocks. All of the publicly available API functions are documented in the menu_block.module file.') . '</p>'
      . '<p>' . t('In addition, Menu block implements HOOK_get_menus() and HOOK_menu_block_tree_alter(). See menu_block.api.php for documentation.') . '</p>';
    return $output;
  }
}

/**
 * Process variables for menu-block-wrapper.html.twig
 *
 * @see menu-block-wrapper.html.twig
 */
function template_preprocess_menu_block_wrapper(&$variables) {
  $variables['attributes']['class'][] = 'menu-name-' . $variables['config']['menu_name'];
  $variables['attributes']['class'][] = 'parent-mlid-' . $variables['config']['parent_mlid'];
  $variables['attributes']['class'][] = 'menu-level-' . $variables['config']['level'];
}

/**
 * Gets the data structure representing a menu tree for the given configuration.
 *
 * @param $config
 *   See the $config param of menu_tree_build().
 *
 * @deprecated as of Drupal 8.x-2.0. Use
 *   Drupal::service('menu_block.repository')->blockData() directly instead.
 */
function menu_tree_block_data(&$config) {
  return \Drupal::service('menu_block.repository')->blockData($config);
}

/**
 * Returns the current page's menu.
 *
 * @deprecated as of Drupal 8.x-2.0. Use
 *   Drupal::service('menu_block.repository')->getCurrentPageMenu() directly
 *   instead.
 */
function menu_block_get_current_page_menu() {
  return \Drupal::service('menu_block.repository')->getCurrentPageMenu();
}

/**
 * Build a menu tree based on the provided configuration.
 *
 * @param $config
 *   array An array of configuration options that specifies how to build the
 *   menu tree and its title.
 *   - delta: (string) The menu_block's block delta.
 *   - menu_name: (string) The machine name of the requested menu. Can also be
 *     set to MENU_TREE__CURRENT_PAGE_MENU to use the menu selected by the page.
 *   - parent_mlid: (int) The mlid of the item that should root the tree. Use 0
 *     to use the menu's root.
 *   - title_link: (boolean) Specifies if the title should be rendered as a link
 *     or a simple string.
 *   - admin_title: (string) An optional title to uniquely identify the block on
 *     the administer blocks page.
 *   - level: (int) The starting level of the tree.
 *   - follow: (string) Specifies if the starting level should follow the
 *     active menu item. Should be set to 0, 'active' or 'child'.
 *   - depth: (int) The maximum depth the tree should contain, relative to the
 *     starting level.
 *   - expanded: (boolean) Specifies if the entire tree be expanded or not.
 *   - sort: (boolean) Specifies if the tree should be sorted with the active
 *     trail at the top of the tree.
 * @return
 *   array An associative array containing several pieces of data.
 *   - content: The tree as a renderable array.
 *   - subject: The title rendered as HTML.
 *   - subject_array: The title as a renderable array.
 *
 * @deprecated
 */
function menu_tree_build(&$config) {
  \Drupal::service('menu_block.render')->build($config);
}

/**
 * Retrieves the menu item to use for the tree's title.
 *
 * @param $render_title_as_link
 *   boolean A boolean that says whether to render the title as a link or a
 *   simple string.
 * @return
 *   array A renderable array containing the tree's title.
 *
 * @deprecated
 */
function menu_block_get_title($render_title_as_link = TRUE) {
  return \Drupal::service('menu_block.render')->getTitle();
}

/**
 * Returns a renderable menu tree.
 *
 * This is a copy of menu_tree_output() with additional classes added to the
 * output.
 *
 * @param $tree
 *   array A data structure representing the tree as returned from menu_tree_data.
 * @return
 *   string The rendered HTML of that data structure.
 *
 * @deprecated
 */
function menu_block_tree_output(&$tree, $config = array()) {
  return \Drupal::service('menu_block.render')->treeOutput();
}

/**
 * Implements hook_menu_block_get_menus() on behalf of book.module.
 * @todo move these to a plugin?
 */
function book_menu_block_get_menus() {
  $menus = array();
  foreach (\Drupal::service('book.manager')->getAllBooks() AS $book) {
    $menus[$book['menu_name']] = $book['title'];
  }
  return $menus;
}

/**
 * Implements hook_menu_block_get_sort_menus() on behalf of book.module.
 * @todo move these to a plugin?
 */
function book_menu_block_get_sort_menus() {
  return array(
    '/^book\-toc\-.+/' => t('Book navigation'),
  );
}
